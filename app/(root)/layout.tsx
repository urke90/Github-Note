import type { Metadata } from 'next';
// fonts
import { inter } from '../ui/fonts';
import SessionProvider from '@/components/auth/SessionProvider';
import { ToastContainer } from 'react-toastify';
import MobileNav from '@/components/navigation/MobileNav';

import { auth } from '@/auth';

import '../globals.css';

// ----------------------------------------------------------------

/**
 * 1. prvo zavrsiti header(mobile) sa sidebar-om  -> 1 bracnh
 * 2. iz te ggrane krenuti Post model u bazi, tag model u bazi, spojiti sa userom, actione za create post, fetch post, action za filtriranje postova, filtriranje po tagovima (desno sidebar), (worlklow, knowdledgde, component) => mora imati pginaciju u server actionu () (NOV BRANCH)
 * 3. HOME page (vidcemo)
 * 4. https://nextjs.org/docs/app/building-your-application/caching
 * 5. https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config#dynamic
 */

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

const RootLayout = async ({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) => {
  const session = await auth();

  // console.log('session', session);

  return (
    <html lang="en">
      <body className={`${inter.className} antialiased`}>
        <SessionProvider session={session}>
          <main className="flex h-screen">
            <aside className="hidden bg-red-100 sm:flex">LEFT ASIDE</aside>
            <div className="flex flex-1 flex-col ">
              <div className="sm:hidden">
                <MobileNav />
              </div>
              {children}
            </div>
            <aside className="hidden bg-red-100 sm:flex">Right Aside</aside>
          </main>
          <ToastContainer closeOnClick newestOnTop />
        </SessionProvider>
      </body>
    </html>
  );
};

export default RootLayout;

/**
 * User interface
 * 1. Posts Model
 *    --- Post moze da ima vise tagova
 *    --- post type
 * 2. Tag Model => user pravi nov post, dodaje bilo koj tag i posle se u right sidebaru prikazuju svi tagovi
 *    ---
 */

/**
 * 1. User ima []PostsID (objectID)
 * 2. Posts ima UserID (objectId)
 */

// model User {
//   id String
//   posts Post[]
//   tags Tag[]
// }

// model Post {
//   id String
//   title String
//   ownerId //REFERENCE TO USER
//   tags tagID[] (array referenci)
// }

// model Tag {
//   id String
//   title String
//   ownerId // REFERENCE TO USER
//   postId  objectId[] (array referenci)
// }

// kada radimo na ovaj nacin posts u useru se sam populatuje i ne storuju se zapravo u bazu nego samo dobijam kroz response

// model User {
//   id String
//   posts referce array
// }

// model Post {
//   id String
//   title String
//   owner User
// }

/**
 * model user line 90 ce
 */
